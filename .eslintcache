[{"C:\\Users\\risha\\Desktop\\ReactJS\\rtce-2\\src\\index.tsx":"1","C:\\Users\\risha\\Desktop\\ReactJS\\rtce-2\\src\\App.tsx":"2","C:\\Users\\risha\\Desktop\\ReactJS\\rtce-2\\src\\reportWebVitals.ts":"3","C:\\Users\\risha\\Desktop\\ReactJS\\rtce-2\\src\\pages\\Login.tsx":"4","C:\\Users\\risha\\Desktop\\ReactJS\\rtce-2\\src\\pages\\Home.tsx":"5","C:\\Users\\risha\\Desktop\\ReactJS\\rtce-2\\src\\component\\AceEditor.tsx":"6","C:\\Users\\risha\\Desktop\\ReactJS\\rtce-2\\src\\component\\InputOutputFile.tsx":"7","C:\\Users\\risha\\Desktop\\ReactJS\\rtce-2\\src\\config.ts":"8","C:\\Users\\risha\\Desktop\\ReactJS\\rtce-2\\src\\service\\socket.ts":"9","C:\\Users\\risha\\Desktop\\ReactJS\\rtce-2\\src\\component\\ChatApp\\ChatMessage.js":"10","C:\\Users\\risha\\Desktop\\ReactJS\\rtce-2\\src\\component\\ChatApp\\ChatMessage-styles.js":"11","C:\\Users\\risha\\Desktop\\ReactJS\\rtce-2\\src\\component\\ChatApp\\index.tsx":"12"},{"size":500,"mtime":1612727806738,"results":"13","hashOfConfig":"14"},{"size":592,"mtime":1613242968119,"results":"15","hashOfConfig":"14"},{"size":425,"mtime":499162500000,"results":"16","hashOfConfig":"14"},{"size":6822,"mtime":1612610124093,"results":"17","hashOfConfig":"14"},{"size":5957,"mtime":1613151135003,"results":"18","hashOfConfig":"14"},{"size":2105,"mtime":1612699062357,"results":"19","hashOfConfig":"14"},{"size":3262,"mtime":1613040925390,"results":"20","hashOfConfig":"14"},{"size":49,"mtime":1612732648466,"results":"21","hashOfConfig":"14"},{"size":108,"mtime":1613045020011,"results":"22","hashOfConfig":"14"},{"size":2677,"mtime":1613121586469,"results":"23","hashOfConfig":"14"},{"size":1347,"mtime":1613120548659,"results":"24","hashOfConfig":"14"},{"size":4406,"mtime":1613151120217,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"e6dgv0",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"28"},"C:\\Users\\risha\\Desktop\\ReactJS\\rtce-2\\src\\index.tsx",[],["56","57"],"C:\\Users\\risha\\Desktop\\ReactJS\\rtce-2\\src\\App.tsx",[],"C:\\Users\\risha\\Desktop\\ReactJS\\rtce-2\\src\\reportWebVitals.ts",[],"C:\\Users\\risha\\Desktop\\ReactJS\\rtce-2\\src\\pages\\Login.tsx",["58","59","60","61","62"],"import React from 'react';\nimport classes from 'styles/login.module.css';\nimport Particles from 'react-particles-js';\nimport Button from '@material-ui/core/Button';\nimport TouchRipple from '@material-ui/core/ButtonBase/TouchRipple';\n\nimport {\n  GoogleLoginButton,\n  GithubLoginButton,\n  TwitterLoginButton,\n} from 'react-social-login-buttons';\n\nconst LoginII = () => {\n  return (\n    <div className={classes['root']}>\n      <Particles\n        height=\"100vh\"\n        width=\"100vw\"\n        params={{\n          particles: {\n            number: {\n              value: 260,\n              density: {\n                enable: true,\n              },\n            },\n            size: {\n              value: 3,\n              random: true,\n              anim: {\n                speed: 4,\n                size_min: 0.3,\n              },\n            },\n            line_linked: {\n              enable: false,\n            },\n            move: {\n              random: true,\n              speed: 1,\n              direction: 'top',\n              out_mode: 'out',\n            },\n          },\n          interactivity: {\n            events: {\n              onhover: {\n                enable: true,\n                mode: 'bubble',\n              },\n              onclick: {\n                enable: true,\n                mode: 'repulse',\n              },\n            },\n            modes: {\n              bubble: {\n                distance: 50,\n                duration: 2,\n                size: 0,\n                opacity: 0,\n              },\n              repulse: {\n                distance: 400,\n                duration: 4,\n              },\n            },\n          },\n        }}\n      />\n      <div className={classes['login-box']}>\n        <div className={classes['login-box-formbox']}>\n          <div className={classes['login-box-signup']}>\n            Don't have an account? <a href=\"#\">Sign Up</a>\n          </div>\n          <div className={classes['login-box-login']}>\n            <h1>Welcome to RTCE</h1>\n            <p>\n              <i>A real Time collaborative editor with embeded compiler</i>\n            </p>\n            <form action=\"#\">\n              <div>\n                <label htmlFor=\"username\"> Guest Name</label>\n                <input\n                  type=\"text\"\n                  name=\"username\"\n                  placeholder=\"Enter your Name\"\n                  className={classes['input-email']}\n                />\n              </div>\n              <div>\n                <input\n                  type=\"button\"\n                  defaultValue=\"Login as a Guest\"\n                  className={classes['btn']}\n                />\n              </div>\n            </form>\n            <div className={classes['alternate-text']}>Or Log in with</div>\n\n            {/* <GoogleLoginButton />\n            <GithubLoginButton />\n            <TwitterLoginButton /> */}\n            <div className={classes['alternate-boxes']}>\n              <Button\n                variant=\"outlined\"\n                className={classes['alternate-box']}\n                style={{\n                  border: '1px solid rgba(190, 190, 190, 0.5)',\n                }}\n              >\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  className={[\n                    classes['icon'],\n                    classes['icon-tabler'],\n                    classes['icon-tabler-brand-facebook'],\n                  ].join(' ')}\n                  width={24}\n                  height={24}\n                  viewBox=\"0 0 24 24\"\n                  strokeWidth={2}\n                  stroke=\"white\"\n                  fill=\"none\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                >\n                  <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                  <path d=\"M17.788 5.108a9 9 0 1 0 3.212 6.892h-8\" />\n                </svg>\n              </Button>\n              <Button\n                variant=\"outlined\"\n                className={classes['alternate-box']}\n                style={{\n                  border: '1px solid rgba(190, 190, 190, 0.5)',\n                }}\n              >\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  className={[\n                    classes['icon'],\n                    classes['icon-tabler'],\n                    classes['icon-tabler-brand-facebook'],\n                  ].join(' ')}\n                  width={24}\n                  height={24}\n                  viewBox=\"0 0 24 24\"\n                  strokeWidth={2}\n                  stroke=\"white\"\n                  fill=\"none\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                >\n                  <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                  <path d=\"M7 10v4h3v7h4v-7h3l1 -4h-4v-2a1 1 0 0 1 1 -1h3v-4h-3a5 5 0 0 0 -5 5v2h-3\" />\n                </svg>\n              </Button>\n              <Button\n                variant=\"outlined\"\n                style={{\n                  padding: '.75rem',\n                  border: '1px solid rgba(190, 190, 190, 0.5)',\n                }}\n                className={classes['alternate-box']}\n                // style={{ backgroundColor: 'white' }}\n              >\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  className={[\n                    classes['icon'],\n                    classes['icon-tabler'],\n                    classes['icon-tabler-brand-apple'],\n                  ].join(' ')}\n                  width={24}\n                  height={24}\n                  viewBox=\"0 0 24 24\"\n                  strokeWidth={2}\n                  stroke=\"white\"\n                  fill=\"none\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                >\n                  <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                  <path d=\"M9 7c-3 0 -4 3 -4 5.5c0 3 2 7.5 4 7.5c1.088 -.046 1.679 -.5 3 -.5c1.312 0 1.5 .5 3 .5s4 -3 4 -5c-.028 -.01 -2.472 -.403 -2.5 -3c-.019 -2.17 2.416 -2.954 2.5 -3c-1.023 -1.492 -2.951 -1.963 -3.5 -2c-1.433 -.111 -2.83 1 -3.5 1c-.68 0 -1.9 -1 -3 -1z\" />\n                  <path d=\"M12 4a2 2 0 0 0 2 -2a2 2 0 0 0 -2 2\" />\n                </svg>\n              </Button>\n            </div>\n          </div>\n        </div>\n        <div className={classes['login-box-quotebox']}>\n          <div className={classes['quote-container']}>\n            <div className={classes['quote']}>Make a Dream.</div>\n            <div className={classes['quote-small']}>\n              'Lorem ipsum dolor sit amet consectetur adipisicing elit. Autem\n              repellendus cumque voluptatum animi, illum veniam?'\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginII;\n","C:\\Users\\risha\\Desktop\\ReactJS\\rtce-2\\src\\pages\\Home.tsx",["63"],"import CodeEditor from 'component/AceEditor';\nimport InputOutputFile from 'component/InputOutputFile';\nimport React, { useState, useRef, createRef } from 'react';\nimport { ReflexContainer, ReflexElement, ReflexSplitter } from 'react-reflex';\nimport 'react-reflex/styles.css';\nimport './Home.css';\nimport { socket } from 'service/socket';\nimport { useSnackbar } from 'notistack';\nimport ChatApp from 'component/ChatApp';\n\nconst Dashboard = () => {\n  const { enqueueSnackbar } = useSnackbar();\n\n  // const displayNotification = ({\n  //   name,\n  //   isConnected,\n  // }: Record<string, unknown>) => {\n  //   const text = isConnected ? 'connected' : 'disconnected';\n  //   const variantStyle = isConnected ? 'success' : 'error';\n\n  //   enqueueSnackbar(`${name} is ${text}`, {\n  //     variant: variantStyle,\n  //   });\n  // };\n\n  React.useEffect(() => {\n    const displayNotification = ({\n      name,\n      isConnected,\n    }: Record<string, unknown>) => {\n      const text = isConnected ? 'connected' : 'disconnected';\n      const variantStyle = isConnected ? 'success' : 'error';\n      enqueueSnackbar(`${name} is ${text}`, {\n        variant: variantStyle,\n      });\n    };\n    socket.on('connected', (data: Record<string, unknown>) => {\n      displayNotification(data);\n      console.log(`I'm Connected with the backend ${data}`);\n    });\n    socket.on('disconnected', (data: Record<string, unknown>) => {\n      displayNotification(data);\n      console.log(`I'm Connected with the backend ${JSON.stringify(data)}`);\n    });\n  }, []);\n\n  const [text, setText] = useState('');\n  const AceEditorRef = useRef(null);\n  const TextAreaRef = createRef<HTMLDivElement>();\n  const [rows, setRows] = useState(4);\n  const resetEditorLayout = () => {\n    const height = Math.floor(TextAreaRef!.current!.clientHeight);\n    const adjustedRows = height > 340 ? height / 27 : height / 45;\n    setRows(Math.floor(adjustedRows));\n\n    //@ts-ignores\n    AceEditorRef!.current!.editor!.resize();\n  };\n\n  return (\n    <div className=\"root\">\n      <ReflexContainer orientation=\"horizontal\">\n        <ReflexElement className=\"header\" flex={0.05}>\n          Hey\n        </ReflexElement>\n        <ReflexElement>\n          <ReflexContainer orientation=\"vertical\">\n            <ReflexElement>\n              <ReflexContainer orientation=\"horizontal\">\n                <ReflexElement className=\"pane-color\">\n                  <div className=\"pane-content\">\n                    <label style={{ height: '0%' }}>\n                      Left Pane <br /> Top\n                      <br />\n                      (splitter propagation)\n                    </label>\n                  </div>\n                </ReflexElement>\n                <ReflexSplitter\n                  className=\"splitter splitter-horizontal\"\n                  propagate={true}\n                />\n                <ReflexElement className=\"pane-color\">\n                  <div>\n                    <label style={{ height: '0%' }}>\n                      Left Pane <br /> Middle\n                      <br />\n                      (splitter propagation)\n                    </label>\n                  </div>\n                </ReflexElement>\n                <ReflexSplitter\n                  className=\"splitter splitter-horizontal\"\n                  propagate={true}\n                />\n                <ReflexElement className=\"pane-color\">\n                  <label style={{ height: '0%' }}>\n                    Left Pane <br /> Bottom\n                    <br />\n                    (splitter propagation)\n                  </label>\n                </ReflexElement>\n              </ReflexContainer>\n            </ReflexElement>\n            {/* 1st content */}\n            <ReflexSplitter\n              className=\"splitter splitter-verticle\"\n              onStopResize={() => resetEditorLayout()}\n            />\n            <ReflexElement flex={0.5}>\n              <ReflexContainer orientation=\"horizontal\">\n                <ReflexElement style={{ display: 'flex' }}>\n                  <CodeEditor\n                    text={text}\n                    setText={setText}\n                    AceEditorRef={AceEditorRef}\n                  />\n                </ReflexElement>\n                <ReflexSplitter\n                  className=\"splitter splitter-horizontal\"\n                  onStopResize={() => resetEditorLayout()}\n                />\n                <ReflexElement flex={0.3}>\n                  <InputOutputFile rows={rows} TextAreaRef={TextAreaRef} />\n                </ReflexElement>\n              </ReflexContainer>\n            </ReflexElement>\n            {/* 3rd content */}\n            <ReflexSplitter\n              className=\"splitter splitter-verticle\"\n              onStopResize={() => resetEditorLayout()}\n            />\n            <ReflexElement>\n              <ReflexContainer orientation=\"horizontal\">\n                <ReflexElement>\n                  <ReflexContainer orientation=\"vertical\">\n                    <ReflexElement className=\"pane-color\">\n                      <h2>Input</h2>\n                    </ReflexElement>\n                    <ReflexSplitter className=\"splitter splitter-verticle\" />\n                    <ReflexElement className=\"pane-color\">\n                      <h2>Output</h2>\n                    </ReflexElement>\n                  </ReflexContainer>\n                </ReflexElement>\n                <ReflexSplitter className=\"splitter splitter-horizontal\" />\n                <ReflexElement className=\"chat-app\">\n                  {/* Chat App Component */}\n                  <ChatApp />\n                </ReflexElement>\n              </ReflexContainer>\n            </ReflexElement>\n          </ReflexContainer>\n        </ReflexElement>\n        <ReflexElement className=\"footer\" flex={0.05}>\n          <div className=\"pane-content\">\n            <label>Footer (fixed)</label>\n          </div>\n        </ReflexElement>\n      </ReflexContainer>\n    </div>\n  );\n};\nexport default Dashboard;\n","C:\\Users\\risha\\Desktop\\ReactJS\\rtce-2\\src\\component\\AceEditor.tsx",["64","65","66","67"],"import React from 'react';\nimport AceEditor from 'react-ace';\n\nimport 'ace-builds/src-min-noconflict/ext-searchbox';\nimport 'ace-builds/src-min-noconflict/ext-language_tools';\nimport 'ace-builds/src-min-noconflict/ext-searchbox';\nimport 'ace-builds/src-min-noconflict/ext-statusbar';\nimport 'ace-builds/src-noconflict/ext-themelist';\n\nimport 'ace-builds/src-noconflict/ace';\nimport 'ace-builds/src-noconflict/mode-c_cpp';\nimport 'ace-builds/src-noconflict/theme-monokai';\nimport 'ace-builds/src-noconflict/keybinding-vim';\nimport Select from 'react-select';\n\nconst languages = ['c_cpp', 'java', 'python', 'typescript', 'golang'];\n\nconst langaugeOptions = [\n  { value: 'c_cpp', label: 'C++' },\n  { value: 'python', label: 'Python' },\n  { value: 'java', label: 'Java' },\n  { value: 'typescript', label: 'Typescript' },\n  { value: 'golang', label: 'GO' },\n];\n\nconst theme = ['moonkai', 'light'];\n\n// let text =\n//   '{\\n  \"id\": 0,\\n  ' +\n//   '\"script\": \"\"\"\\n   function add(x, y) {\\n      return x + y;\\n   }\\n   add(1, 2);\\n   \"\"\"' +\n//   ',\\n   \"descr\": \"add two numbers\"\\n}';\n\ninterface AppProps {\n  text: string;\n  setText: React.Dispatch<React.SetStateAction<string>>;\n  AceEditorRef: React.MutableRefObject<any>;\n}\n\nconst CodeEditor: React.FC<AppProps> = ({ text, setText, AceEditorRef }) => {\n  return (\n    <AceEditor\n      style={{ flexGrow: 1 }}\n      ref={AceEditorRef}\n      // maxLines={Infinity}\n      // width=\"100%\"\n      height=\"100%\"\n      placeholder=\"Enter Code\"\n      mode=\"c_cpp\"\n      theme=\"monokai\"\n      name=\"Ace-Editor-Instance\"\n      onChange={(code: string) => setText(code)}\n      fontSize={16}\n      showPrintMargin={true}\n      showGutter={true}\n      keyboardHandler=\"vim\"\n      highlightActiveLine={true}\n      value={text}\n      setOptions={{\n        showPrintMargin: false,\n        enableBasicAutocompletion: true,\n        enableLiveAutocompletion: true,\n        wrap: true,\n        fontSize: '16px',\n        wrapBehavioursEnabled: true,\n        enableSnippets: true,\n        showLineNumbers: true,\n        tabSize: 2,\n      }}\n    />\n  );\n};\nexport default CodeEditor;\n","C:\\Users\\risha\\Desktop\\ReactJS\\rtce-2\\src\\component\\InputOutputFile.tsx",[],"C:\\Users\\risha\\Desktop\\ReactJS\\rtce-2\\src\\config.ts",[],"C:\\Users\\risha\\Desktop\\ReactJS\\rtce-2\\src\\service\\socket.ts",[],"C:\\Users\\risha\\Desktop\\ReactJS\\rtce-2\\src\\component\\ChatApp\\ChatMessage.js",[],["68","69"],"C:\\Users\\risha\\Desktop\\ReactJS\\rtce-2\\src\\component\\ChatApp\\ChatMessage-styles.js",[],"C:\\Users\\risha\\Desktop\\ReactJS\\rtce-2\\src\\component\\ChatApp\\index.tsx",["70","71","72"],"import React, { useState, useEffect, useRef } from 'react';\nimport { socket } from 'service/socket';\nimport ChatMsg from './ChatMessage';\nimport chalk from 'chalk';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { Button, TextField } from '@material-ui/core';\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      paddding: '1rem',\n      height: 'inherit',\n    },\n    formStyle: {\n      background: 'rgba(0, 0, 0, 0.15)',\n      padding: '0.25rem',\n      display: 'flex',\n      boxSizing: 'border-box',\n      backdropFilter: 'blur(10px)',\n    },\n    inputStyle: {\n      border: 'none',\n      padding: '0 1rem',\n      flexGrow: 1,\n      borderRadius: '2rem',\n      width: '100%',\n      margin: '0.25rem',\n      height: '2rem',\n      '&:focus': {\n        outline: 'none',\n      },\n    },\n    formButton: {\n      background: '#333',\n      border: 'none',\n      padding: '0 1rem',\n      margin: '0.25rem',\n      borderRadius: '3px',\n      outline: 'none',\n      color: '#fff',\n    },\n  })\n);\n\ninterface MessageProps {\n  messages: string[];\n  id: string;\n}\n\nconst ChatApp = () => {\n  const classes = useStyles();\n  const chatBoxRef = useRef<HTMLDivElement>(null);\n\n  const [yourID, setYourID] = useState('');\n  const [message, setMessage] = useState('');\n  const [body, setBody] = useState<MessageProps[]>([]);\n\n  useEffect(() => {\n    socket.on('your-id', (id: string) => {\n      setYourID(id);\n    });\n\n    socket.on('message', (body: MessageProps) => {\n      receivedMessages(body);\n    });\n    const receivedMessages = (newMessage: MessageProps) => {\n      setBody((body) => {\n        return [...body, newMessage];\n        // if (!body.length) return [...body, newMessage];\n        // else if (body[body.length - 1].id === newMessage.id) {\n        //   const newbody = body;\n        //   newbody[newbody.length - 1].messages.push(newMessage.messages[0]);\n        //   return newbody;\n        // } else {\n        //   const newbody = body;\n        //   newbody.push({ id: newMessage.id, messages: newMessage.messages });\n        //   return newbody;\n        // }\n      });\n    };\n  }, []);\n\n  const sendMessage = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!message) return;\n    const messageObject: MessageProps = {\n      id: yourID,\n      messages: [message],\n    };\n    setMessage('');\n    socket.emit('send-message', messageObject);\n  };\n\n  useEffect(() => {\n    if (chatBoxRef.current) chatBoxRef.current.scrollIntoView();\n  }, [body]);\n\n  return (\n    <>\n      <div\n        style={{\n          display: 'flex',\n          height: 'inherit',\n          flexDirection: 'column',\n        }}\n      >\n        <div\n          style={{\n            margin: '1rem',\n            flexGrow: 1,\n          }}\n        >\n          <h1>MESSENGER</h1>\n          {body.map((element, index) => {\n            if (element.id === yourID) {\n              return (\n                <ChatMsg\n                  key={index}\n                  avatar={''}\n                  side={'right'}\n                  messages={[...element.messages]}\n                />\n              );\n            }\n            return <ChatMsg key={index} messages={[...element.messages]} />;\n          })}\n        </div>\n        <div style={{}} ref={chatBoxRef}>\n          <form\n            onSubmit={sendMessage}\n            id=\"chat-form\"\n            className={classes.formStyle}\n          >\n            <input\n              className={classes.inputStyle}\n              autoComplete=\"off\"\n              placeholder=\"Start Chatting...\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n            />\n          </form>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ChatApp;\n\n// // do the thing here\n// console.log(body);\n// const n = body.length - 1;\n// let cloneMessages = [...body];\n// if (n < 0) {\n//   setBody([...body, recievedMessage]);\n//   return;\n// } else {\n//   const currID = recievedMessage.id;\n//   const id = body[n].id;\n\n//   if (currID === id && cloneMessages) {\n//     const clonedMsg = cloneMessages[n].messages;\n//     const new_messages = [...clonedMsg, ...recievedMessage.messages];\n//     cloneMessages[n] = { id: currID, messages: new_messages };\n//   } else {\n//     cloneMessages.push({\n//       id: currID,\n//       messages: [recievedMessage.messages[0]],\n//     });\n//   }\n//   setBody(cloneMessages);\n",{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":5,"column":8,"nodeType":"79","messageId":"80","endLine":5,"endColumn":19},{"ruleId":"77","severity":1,"message":"81","line":8,"column":3,"nodeType":"79","messageId":"80","endLine":8,"endColumn":20},{"ruleId":"77","severity":1,"message":"82","line":9,"column":3,"nodeType":"79","messageId":"80","endLine":9,"endColumn":20},{"ruleId":"77","severity":1,"message":"83","line":10,"column":3,"nodeType":"79","messageId":"80","endLine":10,"endColumn":21},{"ruleId":"84","severity":1,"message":"85","line":74,"column":36,"nodeType":"86","endLine":74,"endColumn":48},{"ruleId":"87","severity":1,"message":"88","line":45,"column":6,"nodeType":"89","endLine":45,"endColumn":8,"suggestions":"90"},{"ruleId":"77","severity":1,"message":"91","line":14,"column":8,"nodeType":"79","messageId":"80","endLine":14,"endColumn":14},{"ruleId":"77","severity":1,"message":"92","line":16,"column":7,"nodeType":"79","messageId":"80","endLine":16,"endColumn":16},{"ruleId":"77","severity":1,"message":"93","line":18,"column":7,"nodeType":"79","messageId":"80","endLine":18,"endColumn":22},{"ruleId":"77","severity":1,"message":"94","line":26,"column":7,"nodeType":"79","messageId":"80","endLine":26,"endColumn":12},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"95","line":4,"column":8,"nodeType":"79","messageId":"80","endLine":4,"endColumn":13},{"ruleId":"77","severity":1,"message":"96","line":6,"column":10,"nodeType":"79","messageId":"80","endLine":6,"endColumn":16},{"ruleId":"77","severity":1,"message":"97","line":6,"column":18,"nodeType":"79","messageId":"80","endLine":6,"endColumn":27},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"@typescript-eslint/no-unused-vars","'TouchRipple' is defined but never used.","Identifier","unusedVar","'GoogleLoginButton' is defined but never used.","'GithubLoginButton' is defined but never used.","'TwitterLoginButton' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'enqueueSnackbar'. Either include it or remove the dependency array.","ArrayExpression",["100"],"'Select' is defined but never used.","'languages' is assigned a value but never used.","'langaugeOptions' is assigned a value but never used.","'theme' is assigned a value but never used.","'chalk' is defined but never used.","'Button' is defined but never used.","'TextField' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},"Update the dependencies array to be: [enqueueSnackbar]",{"range":"103","text":"104"},[1531,1533],"[enqueueSnackbar]"]